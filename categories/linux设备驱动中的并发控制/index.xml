<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux设备驱动中的并发控制 on Play With YYF</title>
    <link>https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
    <description>Recent content in Linux设备驱动中的并发控制 on Play With YYF</description>
    <image>
      <url>https://yyf.zone/papermod-cover.png</url>
      <link>https://yyf.zone/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Feb 2023 15:25:19 +0800</lastBuildDate><atom:link href="https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>信号量、互斥体、完成量</title>
      <link>https://yyf.zone/notes/2023-2-11-semaphore/</link>
      <pubDate>Sat, 11 Feb 2023 15:25:19 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-semaphore/</guid>
      <description>信号量 信号量是操作系统中最典型的用于同步和互斥的手段，信号量的值可以是0、1后者n。信号量操作系统中的PV操作对应。
/* Please don&amp;#39;t access any members of this structure directly */ struct semaphore { raw_spinlock_t	lock; unsigned int	count; struct list_head	wait_list; }; P操作：
/** * down - acquire the semaphore * @sem: the semaphore to be acquired * * Acquires the semaphore. If no more tasks are allowed to acquire the * semaphore, calling this function will put the task to sleep until the * semaphore is released.</description>
    </item>
    
    <item>
      <title>原子操作、自旋锁</title>
      <link>https://yyf.zone/notes/2023-2-11-atomic/</link>
      <pubDate>Sat, 11 Feb 2023 12:46:18 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-atomic/</guid>
      <description>原子操作 原子操作可以保证对一个位或者整型数据的修改是排他性的。位和整型变量的原子操作依赖于底层CPU的原子操作。对于ARM处理器而言，底层使用LDREX和STREX指令。
ldrex指令和strex配对使用，可以让总线监控ldrex到strex之间有无其他的实体存取该地址。如果有则执行失败，重新执行。
自旋锁 自旋锁是一种典型的对临界资源进行互斥访问的手段。在获取自旋锁时，如果自旋锁仍被占用，程序将在一个小的循环内“打转”，直到锁空闲。 自旋锁一般这样使用：
/* 定义一个自旋锁 */ spinlock_t lock; spin_lock_init(&amp;amp;lock); spin_lock(&amp;amp;lock); /* 获取自旋锁，保护临界区 */ ... /* 临界区 */ spin_unlock(&amp;amp;lock); /* 解锁 */ 自旋锁持有期间内核的抢占调度被暂时禁止，也就是自旋锁可以保证临界区不受本CPU内的抢占进程的打扰。其他CPU的进程和中断在获取锁的时候会“自旋”，也就是自旋锁可以避免核间并发的可能性。但是需要注意的是，标准的自旋锁避免不了本CPU中断和底半部的影响。为了防止这种影响，就需要用到自旋锁的衍生：
spin_lock_irq() = spin_lock() + local_irq_disable() spin_unlock_irq() = spin_unlock() + local_irq_enable() spin_lock_irqsave() = spin_lock() + local_irq_save() spin_unlock_irqrestore() = spin_unlock() + local_irq_restore() spin_lock_bh() = spin_lock() + local_bh_disable() spin_unlock_bh = spin_unlock() + local_bh_enable() spin_lock_irq()，spin_lock_irqsave()，spin_lock_bh()类似函数会为自旋锁的使用系好“安全带”。
驱动工程师应该谨慎使用自旋锁，特别注意下面几个问题：
自旋锁实际上是忙等待，只有在占用锁的时间很短的情况下使用自旋锁才是合理的。 自旋锁可能导致系统死锁。引发这个问题最常见的情况是递归使用一个自旋锁。 在自旋锁锁定期间不能调用可能引起进程调度的函数。 在单核情况下编程，也应该认为自己的CPU是多核的，这是考虑到跨平台的要求。 读写自旋锁 读写锁（rwlock）保留了“自旋”的概念，但是两个读执行单元可以同时获取到锁，这样锁的粒度更小了。
顺序锁 顺序锁（seqlock）是对读写锁的一种优化，读执行单元在被顺序锁保护的共享资源进行写操作时仍然可以继续读。写和写仍然是互斥的。尽管读写之间不互相排斥，但是如果读执行单元在读操作期间，写操作单元已经发生了写操作，那么，读执行单元必须重新读取数据。所以，在这种情况下，读端可能反复读多次才能读到有效的数据。
读-复制-更新 RCU（Read-Copy-Update）不同于自旋锁，使用RCU的读端没有锁、内存屏障、原子指令类的开销，几乎可以认为是直接读（只是简单的标明读开始和读结束），而RCU的写执行单元在访问它的共享资源前首先复制一个副本，然后对副本进行修改，最后使用一个回调机制在适当的时机指向原来数据的指针重新指向新的被修改的数据，这个时机就是所有引用该数据的CPU都退出对共享数据读操作的时候。等待适当时机的这一时期成为宽限期（Grace Period）。
RCU可以看作是读写锁的高性能版本，但是写操作比较多时，同步开销比较大。
参考：《Linux设备驱动开发详解》</description>
    </item>
    
    <item>
      <title>并发与竞态、编译和执行乱序、中断屏蔽</title>
      <link>https://yyf.zone/notes/2023-1-26-concurrency/</link>
      <pubDate>Thu, 26 Jan 2023 17:25:53 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-26-concurrency/</guid>
      <description>并发与竞态 并发指的是多个执行单元同时、并行被执行，而并发的执行单元共享资源（硬件资源和软件上的全局变量、静态变量等）的访问则很容易导致竞态。主要的竞态发生于如下几种情况。
对称多处理器（SMP）的多个CPU。 多核处理器不同核心的进程和进程之间、进程和中断之间以及中断和中断之间都存在并发和竞态的可能性。 单CPU内进程与抢占它的进程。 进程与抢占它的进程访问共享资源的情况类似于SMP的多个CPU。 中断（硬中断、软中断、Tasklet、底半部）与进程之间。 如果中断服务程序访问进程正在访问的资源，则竞态也会发生。中断被新的更高优先级的中断打断也可能引起并发而导致竞态。 编译乱序和执行乱序 编译乱序 现代的高性能编译器在目标码优化上都具备对指令进行乱序优化的能力。编译器可以对访存的执行进行乱序，减少逻辑上不必要的访存，以及尽量提高Cache命中率和CPU的Load/Store单元的工作效率。
执行乱序 执行乱序是处理器运行时的行为，编译的二进制指令在处理器上执行时，后发射的指令还是有可能先执行完。高级的CPU可以根据自己缓存的组织特性，将访存指令重新排序执行。连续地址的访问可能会先执行，这样的缓存命中率高。
内存屏障 处理器为了解决多核间一个核的内存行为对另一核可见的问题，引入了一些内存屏障的指令。
DMB（数据内存屏障）：在DMB之后的显式内存访问执行前，保证所有DMB之前的内存访问完成； DSB（数据同步屏障）：位于此指令前的所有显式内存访问均完成，位于此指令前的所有缓存、跳转预测和TLB维护操作全部完成； ISB（指令同步屏障）：Flush流水线，使得所有ISB之后执行的指令都是从缓存或内存中获得的。 Linux内核的自旋锁、互斥体等互斥逻辑，需要用到上述指令：在请求获得锁时，调用屏障指令；在解锁时，也需要调用屏障指令。虽然每个CPU都是乱序执行，但是单个CPU在碰到依赖点的时候会等待，所以执行乱序对单核不一定可见。当程序在访问外设寄存器时，这些寄存器的访问顺序在CPU的逻辑上构不成依赖关系。这时，如果需要固定的寄存器读写顺序，就需要使用CPU的内存屏障指令。Linux内核也提供了带有屏障的寄存器读写API。
中断屏蔽 中断屏蔽使得中断与进程之间的并发不再发生，而且由于Linux内核的进程调度等操作都依赖中断来实现，内核抢占进程之间的并发也得以避免了。其底层的实现是让CPU本身不响应中断，对于ARM处理器来说，就是屏蔽ARM CPSR的I位。长时间中断屏蔽可能造成数据丢失乃至系统崩溃。
local_irq_disable()和local_irq_enable()都是只能禁止和使能本CPU的中断，无法解决SMP多CPU引发的竞态，在驱动单独使用通常意味者一个bug，它适合与自旋锁联合使用。</description>
    </item>
    
  </channel>
</rss>
