<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux设备驱动开发详解 on Play With YYF</title>
    <link>https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/</link>
    <description>Recent content in Linux设备驱动开发详解 on Play With YYF</description>
    <image>
      <url>https://yyf.zone/papermod-cover.png</url>
      <link>https://yyf.zone/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Feb 2023 21:07:24 +0800</lastBuildDate><atom:link href="https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>异步通知</title>
      <link>https://yyf.zone/notes/2023-2-16-asyncnotify/</link>
      <pubDate>Thu, 16 Feb 2023 21:07:24 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-16-asyncnotify/</guid>
      <description>Linux异步通知编程 异步通知的意思是：一旦设备就绪，则主动通知应用程序。比较准确的称谓是“信号驱动的异步I/O”。信号是在软件层次上对中断机制的一种模拟。
Linux信号 使用信号进行进程间通信（IPC）是UNIX中的一种传统机制。除了SIGSTOP和SIGKILL两个信号外，进程能够忽略或捕获其他的全部信号。一个信号被捕获的意思是当一个信号到达时有相应的代码处理它。如果一个信号没有被这个进程所捕获，内核将采用默认行为处理。
信号的接收 typedef void (*sighandler_t) (int); sighandler_t signal(int signum, sighandler_t handler); 第一个参数指定信号的值，第二参数指定针对前面信号值的处理函数。
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact); sigaction()可用于改变进程接收到特定信号后的行为。
信号的释放 为了使设备支持异步通知的机制，驱动程序中涉及3项工作：
支持F_SETOWN命令，能在这个控制命令处理中设置filp-&amp;gt;f_owner为对应进程ID。不过这项工作已经由内核完成了，设备驱动无须处理。 支持F_SETFL命令的处理，每当FASYNC标志改变时，驱动程序中的fasync()函数将得以执行。因此，驱动中应该实现fasync()函数。 在设备资源可获得时，调用kill_fasync()函数激发相应的信号。 异步通知编程涉及一项数据结构和两个函数。数据结构是fasync_struct结构体，两个函数分别是：
处理FASYNC标志变更的函数。 int fasync_helper(int fd, struct file *filp, int mode, struct fasync_struct **fa); 释放信号用的函数。 void kill_fasync(struct fasync_struct **fa, int sig, int band); 支持异步通知的设备结构体模板：
struct xxx_dev{ struct cdev cdev; /* cdev结构体 */ ... struct fasync_struct *async_queue; /* 异步结构体指针 */ }; 支持异步通知的设备驱动程序fasync()函数的模板：</description>
    </item>
    
    <item>
      <title>轮询</title>
      <link>https://yyf.zone/notes/2023-2-16-polling/</link>
      <pubDate>Thu, 16 Feb 2023 18:51:05 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-16-polling/</guid>
      <description>应用程序中的轮询编程 int select(int numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); int poll(struct pollfd *fds, nfds_t nfds, int timeout); int epoll_create(int size); int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); int epoll_wait(int epfd, struct epoll_event *event, int maxevents, int timeout); 设备驱动中的轮询编程 unsigned int(*poll)(struct file *filp, struct poll_table *wait); 第一个参数为file结构体指针，第二个参数为轮询表指针。这个函数应该进行两项工作。
对可能引起设备文件状态变化的等待队列调用poll_wait()函数，将对应的等待队列头部添加到poll_table中。 返回表示是否能对设备进行无阻塞读、写访问的掩码。 void poll_wait(struct file *filp, wait_queue_head_t *queue, poll_table *wait); poll_wait()函数并不会引起阻塞，它的工作是将当前进程添加到wait参数指定的等待列表(poll_table)中，让唤醒参数queue对应的等待队列可以唤醒因select()而睡眠的进程。
example:
static unsigned int xxx_poll(struct file *filp, poll_table *wait) { unsigned int mask = 0; struct xxx_dev *dev = filp-&amp;gt;private_data; /* 获取设备结构体指针 */ .</description>
    </item>
    
    <item>
      <title>阻塞与非阻塞I/O</title>
      <link>https://yyf.zone/notes/2023-2-12-blockio/</link>
      <pubDate>Sun, 12 Feb 2023 17:01:33 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-12-blockio/</guid>
      <description>阻塞与非阻塞I/O 阻塞操作是指在执行设备操作时，若不能获得资源，则挂起进程直到满足可操作的条件后再进行操作。被挂起的进程进入睡眠状态，被从调度器的运行队列移走，直到等待的条件被满足。而非阻塞操作的进程在不能进行设备操作时，并不挂起，它要么放弃，要么不停的查询，直到可以进行操作为止。
等待队列 在Linux驱动程序中，可以使用等待队列（Wait Queue）来实现阻塞进程的唤醒。它以队列为基础数据结构，与进程调度机制紧密结合，可以用来同步对系统资源的访问，信号量在内核中也依赖等待队列来实现。
定义和初始化等待队列 wait_queue_head_t my_queue; /* 定义等待队列头部 */ init_waitqueue_head(&amp;amp;my_queue); /* 初始化等待队列头部 */ DECLARE_WAIT_QUEUE_HEAD(name) /* 定义并初始化等待队列头部的宏 */ 定义和添加/移除等待队列 void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry); void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry); DECLARE_WAITQUEUE(name, tsk) 等待事件 /** * wait_event - sleep until a condition gets true * @wq_head: the waitqueue to wait on * @condition: a C expression for the event to wait for * * The process is put to sleep (TASK_UNINTERRUPTIBLE) until the * @condition evaluates to true.</description>
    </item>
    
    <item>
      <title>信号量、互斥体、完成量</title>
      <link>https://yyf.zone/notes/2023-2-11-semaphore/</link>
      <pubDate>Sat, 11 Feb 2023 15:25:19 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-semaphore/</guid>
      <description>信号量 信号量是操作系统中最典型的用于同步和互斥的手段，信号量的值可以是0、1后者n。信号量操作系统中的PV操作对应。
/* Please don&amp;#39;t access any members of this structure directly */ struct semaphore { raw_spinlock_t	lock; unsigned int	count; struct list_head	wait_list; }; P操作：
/** * down - acquire the semaphore * @sem: the semaphore to be acquired * * Acquires the semaphore. If no more tasks are allowed to acquire the * semaphore, calling this function will put the task to sleep until the * semaphore is released.</description>
    </item>
    
    <item>
      <title>原子操作、自旋锁</title>
      <link>https://yyf.zone/notes/2023-2-11-atomic/</link>
      <pubDate>Sat, 11 Feb 2023 12:46:18 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-atomic/</guid>
      <description>原子操作 原子操作可以保证对一个位或者整型数据的修改是排他性的。位和整型变量的原子操作依赖于底层CPU的原子操作。对于ARM处理器而言，底层使用LDREX和STREX指令。
ldrex指令和strex配对使用，可以让总线监控ldrex到strex之间有无其他的实体存取该地址。如果有则执行失败，重新执行。
自旋锁 自旋锁是一种典型的对临界资源进行互斥访问的手段。在获取自旋锁时，如果自旋锁仍被占用，程序将在一个小的循环内“打转”，直到锁空闲。 自旋锁一般这样使用：
/* 定义一个自旋锁 */ spinlock_t lock; spin_lock_init(&amp;amp;lock); spin_lock(&amp;amp;lock); /* 获取自旋锁，保护临界区 */ ... /* 临界区 */ spin_unlock(&amp;amp;lock); /* 解锁 */ 自旋锁持有期间内核的抢占调度被暂时禁止，也就是自旋锁可以保证临界区不受本CPU内的抢占进程的打扰。其他CPU的进程和中断在获取锁的时候会“自旋”，也就是自旋锁可以避免核间并发的可能性。但是需要注意的是，标准的自旋锁避免不了本CPU中断和底半部的影响。为了防止这种影响，就需要用到自旋锁的衍生：
spin_lock_irq() = spin_lock() + local_irq_disable() spin_unlock_irq() = spin_unlock() + local_irq_enable() spin_lock_irqsave() = spin_lock() + local_irq_save() spin_unlock_irqrestore() = spin_unlock() + local_irq_restore() spin_lock_bh() = spin_lock() + local_bh_disable() spin_unlock_bh = spin_unlock() + local_bh_enable() spin_lock_irq()，spin_lock_irqsave()，spin_lock_bh()类似函数会为自旋锁的使用系好“安全带”。
驱动工程师应该谨慎使用自旋锁，特别注意下面几个问题：
自旋锁实际上是忙等待，只有在占用锁的时间很短的情况下使用自旋锁才是合理的。 自旋锁可能导致系统死锁。引发这个问题最常见的情况是递归使用一个自旋锁。 在自旋锁锁定期间不能调用可能引起进程调度的函数。 在单核情况下编程，也应该认为自己的CPU是多核的，这是考虑到跨平台的要求。 读写自旋锁 读写锁（rwlock）保留了“自旋”的概念，但是两个读执行单元可以同时获取到锁，这样锁的粒度更小了。
顺序锁 顺序锁（seqlock）是对读写锁的一种优化，读执行单元在被顺序锁保护的共享资源进行写操作时仍然可以继续读。写和写仍然是互斥的。尽管读写之间不互相排斥，但是如果读执行单元在读操作期间，写操作单元已经发生了写操作，那么，读执行单元必须重新读取数据。所以，在这种情况下，读端可能反复读多次才能读到有效的数据。
读-复制-更新 RCU（Read-Copy-Update）不同于自旋锁，使用RCU的读端没有锁、内存屏障、原子指令类的开销，几乎可以认为是直接读（只是简单的标明读开始和读结束），而RCU的写执行单元在访问它的共享资源前首先复制一个副本，然后对副本进行修改，最后使用一个回调机制在适当的时机指向原来数据的指针重新指向新的被修改的数据，这个时机就是所有引用该数据的CPU都退出对共享数据读操作的时候。等待适当时机的这一时期成为宽限期（Grace Period）。
RCU可以看作是读写锁的高性能版本，但是写操作比较多时，同步开销比较大。
参考：《Linux设备驱动开发详解》</description>
    </item>
    
    <item>
      <title>并发与竞态、编译和执行乱序、中断屏蔽</title>
      <link>https://yyf.zone/notes/2023-1-26-concurrency/</link>
      <pubDate>Thu, 26 Jan 2023 17:25:53 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-26-concurrency/</guid>
      <description>并发与竞态 并发指的是多个执行单元同时、并行被执行，而并发的执行单元共享资源（硬件资源和软件上的全局变量、静态变量等）的访问则很容易导致竞态。主要的竞态发生于如下几种情况。
对称多处理器（SMP）的多个CPU。 多核处理器不同核心的进程和进程之间、进程和中断之间以及中断和中断之间都存在并发和竞态的可能性。 单CPU内进程与抢占它的进程。 进程与抢占它的进程访问共享资源的情况类似于SMP的多个CPU。 中断（硬中断、软中断、Tasklet、底半部）与进程之间。 如果中断服务程序访问进程正在访问的资源，则竞态也会发生。中断被新的更高优先级的中断打断也可能引起并发而导致竞态。 编译乱序和执行乱序 编译乱序 现代的高性能编译器在目标码优化上都具备对指令进行乱序优化的能力。编译器可以对访存的执行进行乱序，减少逻辑上不必要的访存，以及尽量提高Cache命中率和CPU的Load/Store单元的工作效率。
执行乱序 执行乱序是处理器运行时的行为，编译的二进制指令在处理器上执行时，后发射的指令还是有可能先执行完。高级的CPU可以根据自己缓存的组织特性，将访存指令重新排序执行。连续地址的访问可能会先执行，这样的缓存命中率高。
内存屏障 处理器为了解决多核间一个核的内存行为对另一核可见的问题，引入了一些内存屏障的指令。
DMB（数据内存屏障）：在DMB之后的显式内存访问执行前，保证所有DMB之前的内存访问完成； DSB（数据同步屏障）：位于此指令前的所有显式内存访问均完成，位于此指令前的所有缓存、跳转预测和TLB维护操作全部完成； ISB（指令同步屏障）：Flush流水线，使得所有ISB之后执行的指令都是从缓存或内存中获得的。 Linux内核的自旋锁、互斥体等互斥逻辑，需要用到上述指令：在请求获得锁时，调用屏障指令；在解锁时，也需要调用屏障指令。虽然每个CPU都是乱序执行，但是单个CPU在碰到依赖点的时候会等待，所以执行乱序对单核不一定可见。当程序在访问外设寄存器时，这些寄存器的访问顺序在CPU的逻辑上构不成依赖关系。这时，如果需要固定的寄存器读写顺序，就需要使用CPU的内存屏障指令。Linux内核也提供了带有屏障的寄存器读写API。
中断屏蔽 中断屏蔽使得中断与进程之间的并发不再发生，而且由于Linux内核的进程调度等操作都依赖中断来实现，内核抢占进程之间的并发也得以避免了。其底层的实现是让CPU本身不响应中断，对于ARM处理器来说，就是屏蔽ARM CPSR的I位。长时间中断屏蔽可能造成数据丢失乃至系统崩溃。
local_irq_disable()和local_irq_enable()都是只能禁止和使能本CPU的中断，无法解决SMP多CPU引发的竞态，在驱动单独使用通常意味者一个bug，它适合与自旋锁联合使用。</description>
    </item>
    
    <item>
      <title>Linux字符设备驱动结构</title>
      <link>https://yyf.zone/notes/2023-1-18-cdev-struct/</link>
      <pubDate>Wed, 18 Jan 2023 11:14:12 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-18-cdev-struct/</guid>
      <description>cdev结构体 在linux内核中，使用cdev结构体描述一个字符设备。
struct cdev { struct kobject kobj; /* 内嵌的kobject对象 */ struct module *owner; /* 所属模块 */ const struct file_operations *ops; /* 文件操作结构体 */ struct list_head list; dev_t dev; /* 设备号 */ unsigned int count; } __randomize_layout; cdev结构体的dev_t成员定义了设备号，为32位，其中12位为主设备号，20位为次设备号。使用下列宏可以从dev_t获取主次设备号，也可以从主次设备号生成dev_t。
MAJOR(dev_t dev) MINOR(dev_t dev) MKDEV(int major, int minor) file_operations定义了字符设备驱动提供给虚拟文件系统的接口函数。linux内核提供了一组函数来操作cdev结构体：cdev_init()用来初始化cdev的成员，并建立cdev和file_operations之间的连接。cdev_alloc()用来动态申请cdev内存。cdev_add()和cdev_del()分别向系统添加和删除一个cdev，完成字符设备的注册和注销。
分配和释放设备号 在调用cdev_add()向系统注册字符设备之前，应首先调用register_chrdev_region()或者alloc_chrdev_region()向系统申请设备号，前者用于已知设备号的情况，后者用于未知。相应的在调用cdev_del()注销字符设备之后，unregister_chrdev_region()应该被调用以释放原先申请的设备号。
file_operations结构体 file_operations结构体中的成员函数会在应用程序进行open()、write()、read()、close等系统调用时被内核调用。
struct file_operations { struct module *owner; loff_t (*llseek) (struct file *, loff_t, int); ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); ssize_t (*read_iter) (struct kiocb *, struct iov_iter *); ssize_t (*write_iter) (struct kiocb *, struct iov_iter *); int (*iopoll)(struct kiocb *kiocb, bool spin); int (*iterate) (struct file *, struct dir_context *); int (*iterate_shared) (struct file *, struct dir_context *); __poll_t (*poll) (struct file *, struct poll_table_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); long (*compat_ioctl) (struct file *, unsigned int, unsigned long); int (*mmap) (struct file *, struct vm_area_struct *); unsigned long mmap_supported_flags; int (*open) (struct inode *, struct file *); int (*flush) (struct file *, fl_owner_t id); int (*release) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); int (*fasync) (int, struct file *, int); int (*lock) (struct file *, int, struct file_lock *); ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int); unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long); int (*check_flags)(int); int (*flock) (struct file *, int, struct file_lock *); ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); int (*setlease)(struct file *, long, struct file_lock **, void **); long (*fallocate)(struct file *file, int mode, loff_t offset, loff_t len); void (*show_fdinfo)(struct seq_file *m, struct file *f); #ifndef CONFIG_MMU unsigned (*mmap_capabilities)(struct file *); #endif ssize_t (*copy_file_range)(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int); loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, loff_t len, unsigned int remap_flags); int (*fadvise)(struct file *, loff_t, loff_t, int); bool may_pollfree; } __randomize_layout; Linux字符设备驱动的组成 字符设备驱动模块加载与卸载函数 在字符设备驱动模块加载函数中应该实现设备号的申请和cdev的注册，而在卸载函数中应该实现设备号的释放和cdev的注销。</description>
    </item>
    
    <item>
      <title>sysfs文件系统与Linux设备模型</title>
      <link>https://yyf.zone/notes/2023-1-17-linux-sysfs/</link>
      <pubDate>Tue, 17 Jan 2023 22:03:55 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-17-linux-sysfs/</guid>
      <description>&lt;p&gt;sysfs是一个虚拟的文件系统，它可以产生一个包括所有系统硬件的层级视图，与提供进程和状态信息的proc文件系统十分类似。&lt;br&gt;
sysfs把连接在系统上的设备和总线组织成一个分级的文件，向用户空间导出内核数据结构已经它们的属性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux udev</title>
      <link>https://yyf.zone/notes/2023-1-17-linux-udev/</link>
      <pubDate>Tue, 17 Jan 2023 22:03:46 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-17-linux-udev/</guid>
      <description>&lt;h2 id=&#34;devfs&#34;&gt;devfs&lt;/h2&gt;
&lt;p&gt;devfs的出现使得设备驱动程序能自主地管理自己的设备文件，其具有以下优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以通过程序在设备初始化时在/dev目录下创建设备文件，卸载设备时将它删除。&lt;/li&gt;
&lt;li&gt;设备驱动程序可以指定设备名、所有者和权限位，用户空间程序仍可以修改这些信息。&lt;/li&gt;
&lt;li&gt;不再需要为设备驱动程序分配主设备号以及处理次设备号。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Linux文件系统</title>
      <link>https://yyf.zone/notes/2023-1-14-linuxfile/</link>
      <pubDate>Sat, 14 Jan 2023 19:19:41 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-14-linuxfile/</guid>
      <description>&lt;h2 id=&#34;linux文件系统目录结构&#34;&gt;linux文件系统目录结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/bin&lt;/strong&gt; 包含基本命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sbin&lt;/strong&gt; 包含系统命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/dev&lt;/strong&gt; 设备文件存储目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/etc&lt;/strong&gt; 系统配置文件存储目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lib&lt;/strong&gt; 系统库文件存放目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/mnt&lt;/strong&gt; 一般用于存放挂载存储设备的挂载目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/opt&lt;/strong&gt; 有些软件包会被安装在这里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/proc&lt;/strong&gt; 操作系统运行时，进程及内核信息存放在这里，伪文件系统proc的挂载目录，proc并不是真正的文件系统，它存在于内存之中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/tmp&lt;/strong&gt; 存放临时文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr&lt;/strong&gt; 系统存放程序的目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/var&lt;/strong&gt; 这个目录的内容经常变动，如系统日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sys&lt;/strong&gt; sysfs文件系统被映射在此目录上。linux设备驱动模型中的总线、驱动和设备都可以在sysfs文件系统中找到对应的节点。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Linux内核模块</title>
      <link>https://yyf.zone/notes/2023-1-7-linux-module/</link>
      <pubDate>Sat, 07 Jan 2023 21:02:47 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-7-linux-module/</guid>
      <description>&lt;p&gt;Linux提供了将部分功能单独编译，动态加载到内核的机制，这就是内核模块。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
