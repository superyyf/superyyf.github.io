<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux设备驱动中的异步通知与异步I/O on Play With YYF</title>
    <link>https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E4%B8%8E%E5%BC%82%E6%AD%A5i/o/</link>
    <description>Recent content in Linux设备驱动中的异步通知与异步I/O on Play With YYF</description>
    <image>
      <url>https://yyf.zone/papermod-cover.png</url>
      <link>https://yyf.zone/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://yyf.zone/categories/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E4%B8%8E%E5%BC%82%E6%AD%A5i/o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>异步I/O</title>
      <link>https://yyf.zone/notes/2023-2-17-asyncio/</link>
      <pubDate>Fri, 17 Feb 2023 21:12:49 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-17-asyncio/</guid>
      <description>Linux异步I/O 异步I/O是指应用程序发起I/O动作后，直接开始执行，并不等待I/O结束，它要么过一段时间来查询之前的I/O请求完成情况，要么I/O请求完成了会自动被调用与I/O完成绑定的回调函数。
用户空间的异步I/O Linux的AIO有多种实现，其中一种实现是在用户空间的glibc库中实现的，它本质上是借用了多线程模型，用开启新的线程以同步的方法来做I/O，新的AIO辅助线程与发起AIO的线程以pthread_cond_signal()的形式进行线程间的同步。glibc的AIO主要包括如下函数：
int aio_read(struct aiocb *aiocbp); int aio_write(struct aiocb *aiocbp); int aio_error(struct aiocb *aiocbp); ssize_t aio_return(struct aiocb *aiocbp); int aio_suspend(const struct aiocb *const cblist[], int n, const struct timespec *timeout); int aio_cancel(int fd, struct aiocb *aiocbp); int lio_listio(int mode, struct aiocb *list[], int nent, struct sigevent *sig); aio_read()和aio_write()用来请求一个异步读写操作，参数aiocb(AIO I/O Control Block)包含传输的所有信息。aio_error()用来确定请求的状态，aio_return()只有在aio_error()调用确定请求已经完成（可能成功，也可能发生了错误）之后，才会调用这个函数。aio_suspend()可以阻塞调用进程，直到异步请求完成为止。aio_cancel()用来取消请求。lio_listio()可以用于同时发起多个传输。
内核空间AIO与libaio Linux AIO也可以由内核空间实现，对于块设备而言，AIO可以一次性发出大量的read/write调用并通过通用块层的I/O调度来获得更好的性能，用户程序也可以减少过多的同步负载，还可以在业务逻辑中更灵活的进行并发控制和负载均衡。相较于glibc的用户空间多线程同步等实现也减少了线程的负载和上下文切换等。对于网络设备而言，在socket层面，也可以使用AIO，让CPU和网卡的收发动作充分交叠以改善吞吐性能。
在用户空间一般要结合libaio来进行内核AIO的系统调用：
int io_setup(int maxevents, io_context_t *ctxp); int io_destroy(io_context_t ctx); int io_submit(io_context_t ctx, long nr, struct iocb *ios[]); int io_cancel(io_context_t ctx, struct iocb *iocb, struct io_event *evt); int io_getevents(io_context_t ctx_id, long min_nr, long nr, struct io_event *events, struct timespec *timeout); void io_set_callback(struct iocb *iocb, io_callback_t cb); void io_prep_pwrite(struct iocb *iocb, int fd, void *buf, size_t count, long long offset); void io_prep_pread(struct iocb *iocb, int fd, void *buf, size_t count, long long offset); void io_prep_pwritev(struct iocb *iocb, int fd, const struct iovec *iov, int iovcnt, long long offset); void io_prep_preadv(struct iocb *iocb, int fd, const struct iovec *iov, int iovcnt, long long offset); AIO的读写请求都用io_submit()下发。下发前通过io_prep_pwrite()和io_prep_pread()生成iocb的结构体，作为io_submit()的参数。这个结构体指定了读写类型、起始地址、长度和设备标识符等信息。读写请求下发之后，使用io_getevents()函数等待I/O完成事件。io_set_callback()则可以设置一个AIO完成的回调函数。</description>
    </item>
    
    <item>
      <title>异步通知</title>
      <link>https://yyf.zone/notes/2023-2-16-asyncnotify/</link>
      <pubDate>Thu, 16 Feb 2023 21:07:24 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-16-asyncnotify/</guid>
      <description>Linux异步通知编程 异步通知的意思是：一旦设备就绪，则主动通知应用程序。比较准确的称谓是“信号驱动的异步I/O”。信号是在软件层次上对中断机制的一种模拟。
Linux信号 使用信号进行进程间通信（IPC）是UNIX中的一种传统机制。除了SIGSTOP和SIGKILL两个信号外，进程能够忽略或捕获其他的全部信号。一个信号被捕获的意思是当一个信号到达时有相应的代码处理它。如果一个信号没有被这个进程所捕获，内核将采用默认行为处理。
信号的接收 typedef void (*sighandler_t) (int); sighandler_t signal(int signum, sighandler_t handler); 第一个参数指定信号的值，第二参数指定针对前面信号值的处理函数。
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact); sigaction()可用于改变进程接收到特定信号后的行为。
信号的释放 为了使设备支持异步通知的机制，驱动程序中涉及3项工作：
支持F_SETOWN命令，能在这个控制命令处理中设置filp-&amp;gt;f_owner为对应进程ID。不过这项工作已经由内核完成了，设备驱动无须处理。 支持F_SETFL命令的处理，每当FASYNC标志改变时，驱动程序中的fasync()函数将得以执行。因此，驱动中应该实现fasync()函数。 在设备资源可获得时，调用kill_fasync()函数激发相应的信号。 异步通知编程涉及一项数据结构和两个函数。数据结构是fasync_struct结构体，两个函数分别是：
处理FASYNC标志变更的函数。 int fasync_helper(int fd, struct file *filp, int mode, struct fasync_struct **fa); 释放信号用的函数。 void kill_fasync(struct fasync_struct **fa, int sig, int band); 支持异步通知的设备结构体模板：
struct xxx_dev{ struct cdev cdev; /* cdev结构体 */ ... struct fasync_struct *async_queue; /* 异步结构体指针 */ }; 支持异步通知的设备驱动程序fasync()函数的模板：</description>
    </item>
    
  </channel>
</rss>
