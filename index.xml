<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Play With YYF</title>
    <link>https://yyf.zone/</link>
    <description>Recent content on Play With YYF</description>
    <image>
      <url>https://yyf.zone/papermod-cover.png</url>
      <link>https://yyf.zone/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Feb 2023 15:25:19 +0800</lastBuildDate><atom:link href="https://yyf.zone/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>信号量、互斥体、完成量</title>
      <link>https://yyf.zone/notes/2023-2-11-semaphore/</link>
      <pubDate>Sat, 11 Feb 2023 15:25:19 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-semaphore/</guid>
      <description>信号量 信号量是操作系统中最典型的用于同步和互斥的手段，信号量的值可以是0、1后者n。信号量操作系统中的PV操作对应。
/* Please don&amp;#39;t access any members of this structure directly */ struct semaphore { raw_spinlock_t	lock; unsigned int	count; struct list_head	wait_list; }; P操作：
/** * down - acquire the semaphore * @sem: the semaphore to be acquired * * Acquires the semaphore. If no more tasks are allowed to acquire the * semaphore, calling this function will put the task to sleep until the * semaphore is released.</description>
    </item>
    
    <item>
      <title>原子操作、自旋锁</title>
      <link>https://yyf.zone/notes/2023-2-11-atomic/</link>
      <pubDate>Sat, 11 Feb 2023 12:46:18 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-2-11-atomic/</guid>
      <description>原子操作 原子操作可以保证对一个位或者整型数据的修改是排他性的。位和整型变量的原子操作依赖于底层CPU的原子操作。对于ARM处理器而言，底层使用LDREX和STREX指令。
ldrex指令和strex配对使用，可以让总线监控ldrex到strex之间有无其他的实体存取该地址。如果有则执行失败，重新执行。
自旋锁 自旋锁是一种典型的对临界资源进行互斥访问的手段。在获取自旋锁时，如果自旋锁仍被占用，程序将在一个小的循环内“打转”，直到锁空闲。 自旋锁一般这样使用：
/* 定义一个自旋锁 */ spinlock_t lock; spin_lock_init(&amp;amp;lock); spin_lock(&amp;amp;lock); /* 获取自旋锁，保护临界区 */ ... /* 临界区 */ spin_unlock(&amp;amp;lock); /* 解锁 */ 自旋锁持有期间内核的抢占调度被暂时禁止，也就是自旋锁可以保证临界区不受本CPU内的抢占进程的打扰。其他CPU的进程和中断在获取锁的时候会“自旋”，也就是自旋锁可以避免核间并发的可能性。但是需要注意的是，标准的自旋锁避免不了本CPU中断和底半部的影响。为了防止这种影响，就需要用到自旋锁的衍生：
spin_lock_irq() = spin_lock() + local_irq_disable() spin_unlock_irq() = spin_unlock() + local_irq_enable() spin_lock_irqsave() = spin_lock() + local_irq_save() spin_unlock_irqrestore() = spin_unlock() + local_irq_restore() spin_lock_bh() = spin_lock() + local_bh_disable() spin_unlock_bh = spin_unlock() + local_bh_enable() spin_lock_irq()，spin_lock_irqsave()，spin_lock_bh()类似函数会为自旋锁的使用系好“安全带”。
驱动工程师应该谨慎使用自旋锁，特别注意下面几个问题：
自旋锁实际上是忙等待，只有在占用锁的时间很短的情况下使用自旋锁才是合理的。 自旋锁可能导致系统死锁。引发这个问题最常见的情况是递归使用一个自旋锁。 在自旋锁锁定期间不能调用可能引起进程调度的函数。 在单核情况下编程，也应该认为自己的CPU是多核的，这是考虑到跨平台的要求。 读写自旋锁 读写锁（rwlock）保留了“自旋”的概念，但是两个读执行单元可以同时获取到锁，这样锁的粒度更小了。
顺序锁 顺序锁（seqlock）是对读写锁的一种优化，读执行单元在被顺序锁保护的共享资源进行写操作时仍然可以继续读。写和写仍然是互斥的。尽管读写之间不互相排斥，但是如果读执行单元在读操作期间，写操作单元已经发生了写操作，那么，读执行单元必须重新读取数据。所以，在这种情况下，读端可能反复读多次才能读到有效的数据。
读-复制-更新 RCU（Read-Copy-Update）不同于自旋锁，使用RCU的读端没有锁、内存屏障、原子指令类的开销，几乎可以认为是直接读（只是简单的标明读开始和读结束），而RCU的写执行单元在访问它的共享资源前首先复制一个副本，然后对副本进行修改，最后使用一个回调机制在适当的时机指向原来数据的指针重新指向新的被修改的数据，这个时机就是所有引用该数据的CPU都退出对共享数据读操作的时候。等待适当时机的这一时期成为宽限期（Grace Period）。
RCU可以看作是读写锁的高性能版本，但是写操作比较多时，同步开销比较大。
参考：《Linux设备驱动开发详解》</description>
    </item>
    
    <item>
      <title>C&#43;&#43; range-based for loop与临时对象</title>
      <link>https://yyf.zone/blogs/2023-2-6-rangefor/</link>
      <pubDate>Mon, 06 Feb 2023 21:18:12 +0800</pubDate>
      
      <guid>https://yyf.zone/blogs/2023-2-6-rangefor/</guid>
      <description>range-based for loop是从C++11开始出现的新语法，可以非常简洁的实现序列迭代。在实际使用中，发现了一个需要注意的细节，就是当range-expression表达式中出现临时对象时需要十分小心。
range-based for loop 语法 attr(optional) for ( init-statement(optional) range-declaration : range-expression ) loop-statement range-declaration是序列元素的声明，range-expression是表示某一个序列的表达式，这个序列可以是数组，有begin()、end()成员函数的可迭代对象，或者初始化队列。 上述的语法可以等效成下面的一组语句：
{ auto &amp;amp;&amp;amp; __range = range-expression ; for (auto __begin = begin-expr, __end = end-expr; __begin != __end; ++__begin) { range-declaration = *__begin; loop-statement } } range-expression 与临时变量 尝试编译运行下面的代码
#include &amp;lt;iostream&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; struct xxx { std::vector&amp;lt;std::string&amp;gt; vec; }; std::shared_ptr&amp;lt;struct xxx&amp;gt; f() { auto p = std::make_shared&amp;lt;struct xxx&amp;gt;(); p-&amp;gt;vec.</description>
    </item>
    
    <item>
      <title>并发与竞态、编译和执行乱序、中断屏蔽</title>
      <link>https://yyf.zone/notes/2023-1-26-concurrency/</link>
      <pubDate>Thu, 26 Jan 2023 17:25:53 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-26-concurrency/</guid>
      <description>并发与竞态 并发指的是多个执行单元同时、并行被执行，而并发的执行单元共享资源（硬件资源和软件上的全局变量、静态变量等）的访问则很容易导致竞态。主要的竞态发生于如下几种情况。
对称多处理器（SMP）的多个CPU。 多核处理器不同核心的进程和进程之间、进程和中断之间以及中断和中断之间都存在并发和竞态的可能性。 单CPU内进程与抢占它的进程。 进程与抢占它的进程访问共享资源的情况类似于SMP的多个CPU。 中断（硬中断、软中断、Tasklet、底半部）与进程之间。 如果中断服务程序访问进程正在访问的资源，则竞态也会发生。中断被新的更高优先级的中断打断也可能引起并发而导致竞态。 编译乱序和执行乱序 编译乱序 现代的高性能编译器在目标码优化上都具备对指令进行乱序优化的能力。编译器可以对访存的执行进行乱序，减少逻辑上不必要的访存，以及尽量提高Cache命中率和CPU的Load/Store单元的工作效率。
执行乱序 执行乱序是处理器运行时的行为，编译的二进制指令在处理器上执行时，后发射的指令还是有可能先执行完。高级的CPU可以根据自己缓存的组织特性，将访存指令重新排序执行。连续地址的访问可能会先执行，这样的缓存命中率高。
内存屏障 处理器为了解决多核间一个核的内存行为对另一核可见的问题，引入了一些内存屏障的指令。
DMB（数据内存屏障）：在DMB之后的显式内存访问执行前，保证所有DMB之前的内存访问完成； DSB（数据同步屏障）：位于此指令前的所有显式内存访问均完成，位于此指令前的所有缓存、跳转预测和TLB维护操作全部完成； ISB（指令同步屏障）：Flush流水线，使得所有ISB之后执行的指令都是从缓存或内存中获得的。 Linux内核的自旋锁、互斥体等互斥逻辑，需要用到上述指令：在请求获得锁时，调用屏障指令；在解锁时，也需要调用屏障指令。虽然每个CPU都是乱序执行，但是单个CPU在碰到依赖点的时候会等待，所以执行乱序对单核不一定可见。当程序在访问外设寄存器时，这些寄存器的访问顺序在CPU的逻辑上构不成依赖关系。这时，如果需要固定的寄存器读写顺序，就需要使用CPU的内存屏障指令。Linux内核也提供了带有屏障的寄存器读写API。
中断屏蔽 中断屏蔽使得中断与进程之间的并发不再发生，而且由于Linux内核的进程调度等操作都依赖中断来实现，内核抢占进程之间的并发也得以避免了。其底层的实现是让CPU本身不响应中断，对于ARM处理器来说，就是屏蔽ARM CPSR的I位。长时间中断屏蔽可能造成数据丢失乃至系统崩溃。
local_irq_disable()和local_irq_enable()都是只能禁止和使能本CPU的中断，无法解决SMP多CPU引发的竞态，在驱动单独使用通常意味者一个bug，它适合与自旋锁联合使用。</description>
    </item>
    
    <item>
      <title>Linux字符设备驱动结构</title>
      <link>https://yyf.zone/notes/2023-1-18-cdev-struct/</link>
      <pubDate>Wed, 18 Jan 2023 11:14:12 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-18-cdev-struct/</guid>
      <description>cdev结构体 在linux内核中，使用cdev结构体描述一个字符设备。
struct cdev { struct kobject kobj; /* 内嵌的kobject对象 */ struct module *owner; /* 所属模块 */ const struct file_operations *ops; /* 文件操作结构体 */ struct list_head list; dev_t dev; /* 设备号 */ unsigned int count; } __randomize_layout; cdev结构体的dev_t成员定义了设备号，为32位，其中12位为主设备号，20位为次设备号。使用下列宏可以从dev_t获取主次设备号，也可以从主次设备号生成dev_t。
MAJOR(dev_t dev) MINOR(dev_t dev) MKDEV(int major, int minor) file_operations定义了字符设备驱动提供给虚拟文件系统的接口函数。linux内核提供了一组函数来操作cdev结构体：cdev_init()用来初始化cdev的成员，并建立cdev和file_operations之间的连接。cdev_alloc()用来动态申请cdev内存。cdev_add()和cdev_del()分别向系统添加和删除一个cdev，完成字符设备的注册和注销。
分配和释放设备号 在调用cdev_add()向系统注册字符设备之前，应首先调用register_chrdev_region()或者alloc_chrdev_region()向系统申请设备号，前者用于已知设备号的情况，后者用于未知。相应的在调用cdev_del()注销字符设备之后，unregister_chrdev_region()应该被调用以释放原先申请的设备号。
file_operations结构体 file_operations结构体中的成员函数会在应用程序进行open()、write()、read()、close等系统调用时被内核调用。
struct file_operations { struct module *owner; loff_t (*llseek) (struct file *, loff_t, int); ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); ssize_t (*read_iter) (struct kiocb *, struct iov_iter *); ssize_t (*write_iter) (struct kiocb *, struct iov_iter *); int (*iopoll)(struct kiocb *kiocb, bool spin); int (*iterate) (struct file *, struct dir_context *); int (*iterate_shared) (struct file *, struct dir_context *); __poll_t (*poll) (struct file *, struct poll_table_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); long (*compat_ioctl) (struct file *, unsigned int, unsigned long); int (*mmap) (struct file *, struct vm_area_struct *); unsigned long mmap_supported_flags; int (*open) (struct inode *, struct file *); int (*flush) (struct file *, fl_owner_t id); int (*release) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); int (*fasync) (int, struct file *, int); int (*lock) (struct file *, int, struct file_lock *); ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int); unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long); int (*check_flags)(int); int (*flock) (struct file *, int, struct file_lock *); ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); int (*setlease)(struct file *, long, struct file_lock **, void **); long (*fallocate)(struct file *file, int mode, loff_t offset, loff_t len); void (*show_fdinfo)(struct seq_file *m, struct file *f); #ifndef CONFIG_MMU unsigned (*mmap_capabilities)(struct file *); #endif ssize_t (*copy_file_range)(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int); loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, loff_t len, unsigned int remap_flags); int (*fadvise)(struct file *, loff_t, loff_t, int); bool may_pollfree; } __randomize_layout; Linux字符设备驱动的组成 字符设备驱动模块加载与卸载函数 在字符设备驱动模块加载函数中应该实现设备号的申请和cdev的注册，而在卸载函数中应该实现设备号的释放和cdev的注销。</description>
    </item>
    
    <item>
      <title>sysfs文件系统与Linux设备模型</title>
      <link>https://yyf.zone/notes/2023-1-17-linux-sysfs/</link>
      <pubDate>Tue, 17 Jan 2023 22:03:55 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-17-linux-sysfs/</guid>
      <description>&lt;p&gt;sysfs是一个虚拟的文件系统，它可以产生一个包括所有系统硬件的层级视图，与提供进程和状态信息的proc文件系统十分类似。&lt;br&gt;
sysfs把连接在系统上的设备和总线组织成一个分级的文件，向用户空间导出内核数据结构已经它们的属性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux udev</title>
      <link>https://yyf.zone/notes/2023-1-17-linux-udev/</link>
      <pubDate>Tue, 17 Jan 2023 22:03:46 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-17-linux-udev/</guid>
      <description>&lt;h2 id=&#34;devfs&#34;&gt;devfs&lt;/h2&gt;
&lt;p&gt;devfs的出现使得设备驱动程序能自主地管理自己的设备文件，其具有以下优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以通过程序在设备初始化时在/dev目录下创建设备文件，卸载设备时将它删除。&lt;/li&gt;
&lt;li&gt;设备驱动程序可以指定设备名、所有者和权限位，用户空间程序仍可以修改这些信息。&lt;/li&gt;
&lt;li&gt;不再需要为设备驱动程序分配主设备号以及处理次设备号。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Linux文件系统</title>
      <link>https://yyf.zone/notes/2023-1-14-linuxfile/</link>
      <pubDate>Sat, 14 Jan 2023 19:19:41 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-14-linuxfile/</guid>
      <description>&lt;h2 id=&#34;linux文件系统目录结构&#34;&gt;linux文件系统目录结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/bin&lt;/strong&gt; 包含基本命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sbin&lt;/strong&gt; 包含系统命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/dev&lt;/strong&gt; 设备文件存储目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/etc&lt;/strong&gt; 系统配置文件存储目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lib&lt;/strong&gt; 系统库文件存放目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/mnt&lt;/strong&gt; 一般用于存放挂载存储设备的挂载目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/opt&lt;/strong&gt; 有些软件包会被安装在这里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/proc&lt;/strong&gt; 操作系统运行时，进程及内核信息存放在这里，伪文件系统proc的挂载目录，proc并不是真正的文件系统，它存在于内存之中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/tmp&lt;/strong&gt; 存放临时文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr&lt;/strong&gt; 系统存放程序的目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/var&lt;/strong&gt; 这个目录的内容经常变动，如系统日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sys&lt;/strong&gt; sysfs文件系统被映射在此目录上。linux设备驱动模型中的总线、驱动和设备都可以在sysfs文件系统中找到对应的节点。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Linux内核模块</title>
      <link>https://yyf.zone/notes/2023-1-7-linux-module/</link>
      <pubDate>Sat, 07 Jan 2023 21:02:47 +0800</pubDate>
      
      <guid>https://yyf.zone/notes/2023-1-7-linux-module/</guid>
      <description>&lt;p&gt;Linux提供了将部分功能单独编译，动态加载到内核的机制，这就是内核模块。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>绑定RawSocket与Interface</title>
      <link>https://yyf.zone/blogs/2022-12-21-rawsocketbindinterface/</link>
      <pubDate>Wed, 21 Dec 2022 21:11:50 +0800</pubDate>
      
      <guid>https://yyf.zone/blogs/2022-12-21-rawsocketbindinterface/</guid>
      <description>&lt;p&gt;在做以太网的回环测试时，需要实现指定MAC发送RawSocket报文，然后指定MAC接收回环过来的RawSocket报文。这就需要将socket绑定到网络接口（eth0,eth1），rawsocket的绑定方式与其他socket还不一样，研究了一下发现可以通过下面的方式实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>强制类型转换</title>
      <link>https://yyf.zone/notes/2021-8-5-typecast/</link>
      <pubDate>Thu, 05 Aug 2021 20:57:04 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-8-5-typecast/</guid>
      <description>&lt;h1 id=&#34;强制类型转换&#34;&gt;强制类型转换&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>一篇搞定static, extern</title>
      <link>https://yyf.zone/notes/2021-8-5-staticextern/</link>
      <pubDate>Thu, 05 Aug 2021 16:45:28 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-8-5-staticextern/</guid>
      <description>&lt;h1 id=&#34;一篇搞定static-extern&#34;&gt;一篇搞定static, extern&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>目录</title>
      <link>https://yyf.zone/notes/2021-8-4-directory/</link>
      <pubDate>Wed, 04 Aug 2021 17:26:16 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-8-4-directory/</guid>
      <description>&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>文件</title>
      <link>https://yyf.zone/notes/2021-8-3-file/</link>
      <pubDate>Tue, 03 Aug 2021 20:29:33 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-8-3-file/</guid>
      <description>&lt;h1 id=&#34;文件&#34;&gt;文件&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>二分查找的简单总结</title>
      <link>https://yyf.zone/notes/2021-8-3-binarysearch/</link>
      <pubDate>Tue, 03 Aug 2021 16:29:01 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-8-3-binarysearch/</guid>
      <description>&lt;h1 id=&#34;二分查找&#34;&gt;二分查找&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>AVL树、红黑树、B树和B&#43;树</title>
      <link>https://yyf.zone/notes/2021-7-25-tree/</link>
      <pubDate>Sun, 25 Jul 2021 15:30:30 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-7-25-tree/</guid>
      <description>&lt;h1 id=&#34;avl树红黑树b树和b树&#34;&gt;AVL树、红黑树、B树和B+树&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>地址空间和交换技术</title>
      <link>https://yyf.zone/notes/2021-7-2-addressspace/</link>
      <pubDate>Fri, 02 Jul 2021 21:13:37 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-7-2-addressspace/</guid>
      <description>&lt;h1 id=&#34;地址空间和交换技术&#34;&gt;地址空间和交换技术&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>二叉树的遍历-中序遍历</title>
      <link>https://yyf.zone/notes/2021-7-1-inodertraversal/</link>
      <pubDate>Thu, 01 Jul 2021 13:43:08 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-7-1-inodertraversal/</guid>
      <description>&lt;h1 id=&#34;二叉树的遍历-中序遍历&#34;&gt;二叉树的遍历-中序遍历&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>操作系统面经(Part 2)</title>
      <link>https://yyf.zone/notes/2021-6-30-ospart2/</link>
      <pubDate>Wed, 30 Jun 2021 16:24:15 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-6-30-ospart2/</guid>
      <description>&lt;h1 id=&#34;操作系统part-2&#34;&gt;操作系统(Part 2)&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>操作系统面经(Part 1)</title>
      <link>https://yyf.zone/notes/2021-6-28-ospart1/</link>
      <pubDate>Mon, 28 Jun 2021 21:44:32 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-6-28-ospart1/</guid>
      <description>&lt;p&gt;面经整理/操作系统（part 1）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RANSAC算法</title>
      <link>https://yyf.zone/notes/2021-3-11-ransac/</link>
      <pubDate>Thu, 11 Mar 2021 09:27:43 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-3-11-ransac/</guid>
      <description>&lt;p&gt;图像匹配/经典算法/RANSAC算法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>宽带接入技术</title>
      <link>https://yyf.zone/notes/2021-2-1-fttx/</link>
      <pubDate>Mon, 01 Feb 2021 13:03:39 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-2-1-fttx/</guid>
      <description>&lt;p&gt;计算机网络/物理层/宽带接入技术&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数字传输系统</title>
      <link>https://yyf.zone/notes/2021-2-1-digitaltransmission/</link>
      <pubDate>Mon, 01 Feb 2021 13:03:09 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-2-1-digitaltransmission/</guid>
      <description>&lt;p&gt;计算机网络/物理层/数字传输系统&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>信道复用技术</title>
      <link>https://yyf.zone/notes/2021-2-1-channelmultiplex/</link>
      <pubDate>Mon, 01 Feb 2021 11:20:40 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-2-1-channelmultiplex/</guid>
      <description>&lt;p&gt;计算机网络/物理层/信道复用技术&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>物理层下面的传输媒体</title>
      <link>https://yyf.zone/notes/2021-1-31-transmissionmedium/</link>
      <pubDate>Sun, 31 Jan 2021 20:50:15 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-31-transmissionmedium/</guid>
      <description>&lt;p&gt;计算机网络/物理层/物理层下面的传输媒体&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>物理层的基本概念及涉及的基础知识</title>
      <link>https://yyf.zone/notes/2021-1-31-physicallayer/</link>
      <pubDate>Sun, 31 Jan 2021 10:06:18 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-31-physicallayer/</guid>
      <description>&lt;p&gt;计算机网络/物理层/物理层的基本概念及涉及的基础知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速以太网</title>
      <link>https://yyf.zone/notes/2021-1-29-fastethernet/</link>
      <pubDate>Fri, 29 Jan 2021 20:51:49 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-29-fastethernet/</guid>
      <description>&lt;p&gt;计算机网络/数据链路层/高速以太网&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>扩展的以太网</title>
      <link>https://yyf.zone/notes/2021-1-29-extendedethernet/</link>
      <pubDate>Fri, 29 Jan 2021 20:47:45 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-29-extendedethernet/</guid>
      <description>&lt;p&gt;计算机网络/数据链路层/扩展的以太网&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用广播信道的数据链路层</title>
      <link>https://yyf.zone/notes/2021-1-29-broadcast/</link>
      <pubDate>Fri, 29 Jan 2021 20:42:18 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-29-broadcast/</guid>
      <description>&lt;p&gt;计算机网络/数据链路层/使用广播信道的数据链路层&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用点对点信道的数据链路层</title>
      <link>https://yyf.zone/notes/2021-1-25-datalinklayer/</link>
      <pubDate>Mon, 25 Jan 2021 16:23:58 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-25-datalinklayer/</guid>
      <description>&lt;p&gt;计算机网络/数据链路层/使用点对点信道的数据链路层&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>点对点协议PPP</title>
      <link>https://yyf.zone/notes/2021-1-25-ppp/</link>
      <pubDate>Mon, 25 Jan 2021 16:18:41 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-25-ppp/</guid>
      <description>&lt;p&gt;计算机网络/数据链路层/点对点协议PPP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文件传送协议FTP</title>
      <link>https://yyf.zone/notes/2021-1-22-ftp/</link>
      <pubDate>Fri, 22 Jan 2021 16:06:59 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-22-ftp/</guid>
      <description>&lt;p&gt;计算机网络/应用层/文件传送协议FTP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>远程终端协议TELNET</title>
      <link>https://yyf.zone/notes/2021-1-22-telnet/</link>
      <pubDate>Fri, 22 Jan 2021 16:04:09 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-22-telnet/</guid>
      <description>&lt;p&gt;计算机网络/应用层/远程终端协议TELNET&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网际协议IP</title>
      <link>https://yyf.zone/notes/2021-1-22-ip/</link>
      <pubDate>Fri, 22 Jan 2021 15:48:41 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-22-ip/</guid>
      <description>&lt;p&gt;计算机网络/网络层/网际协议IP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>划分子网和构造超网</title>
      <link>https://yyf.zone/notes/2021-1-21-cidr/</link>
      <pubDate>Thu, 21 Jan 2021 18:13:39 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-21-cidr/</guid>
      <description>&lt;p&gt;计算机网络/网络层/划分子网和构造超网&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网际控制报文协议ICMP</title>
      <link>https://yyf.zone/notes/2021-1-21-icmp/</link>
      <pubDate>Thu, 21 Jan 2021 08:48:12 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-21-icmp/</guid>
      <description>&lt;p&gt;计算机网络/网络层/网际控制报文协议ICMP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>互联网的路由选择协议</title>
      <link>https://yyf.zone/notes/2021-1-19-route/</link>
      <pubDate>Tue, 19 Jan 2021 17:32:46 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-19-route/</guid>
      <description>&lt;p&gt;计算机网络/网络层/互联网的路由选择协议&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>P2P应用</title>
      <link>https://yyf.zone/notes/2021-1-19-p2p/</link>
      <pubDate>Tue, 19 Jan 2021 15:42:44 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-19-p2p/</guid>
      <description>&lt;p&gt;计算机网络/应用层/P2P应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>应用进程跨越网络的通信</title>
      <link>https://yyf.zone/notes/2021-1-18-socket/</link>
      <pubDate>Mon, 18 Jan 2021 19:56:07 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-18-socket/</guid>
      <description>&lt;p&gt;计算机网络/应用层/应用进程跨越网络的通信&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单网络管理协议SNMP</title>
      <link>https://yyf.zone/notes/2021-1-18-snmp/</link>
      <pubDate>Mon, 18 Jan 2021 16:39:52 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-18-snmp/</guid>
      <description>&lt;p&gt;计算机网络/应用层/简单网络管理协议SNMP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动态主机配置协议DHCP</title>
      <link>https://yyf.zone/notes/2021-1-16-dhcp/</link>
      <pubDate>Sat, 16 Jan 2021 19:59:13 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-16-dhcp/</guid>
      <description>&lt;p&gt;计算机网络/应用层/动态主机配置协议DHCP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>电子邮件</title>
      <link>https://yyf.zone/notes/2021-1-16-email/</link>
      <pubDate>Sat, 16 Jan 2021 16:46:24 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-16-email/</guid>
      <description>&lt;p&gt;计算机网络/应用层/电子邮件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>万维网WWW</title>
      <link>https://yyf.zone/notes/2021-1-15-www/</link>
      <pubDate>Fri, 15 Jan 2021 18:16:59 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-15-www/</guid>
      <description>&lt;p&gt;计算机网络/应用层/万维网WWW&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文件传送协议FTP</title>
      <link>https://yyf.zone/notes/2021-1-14-ftp/</link>
      <pubDate>Thu, 14 Jan 2021 21:34:37 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-14-ftp/</guid>
      <description>&lt;p&gt;计算机网络/应用层/文件传送协议FTP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>域名系统DNS</title>
      <link>https://yyf.zone/notes/2021-1-13-dns/</link>
      <pubDate>Wed, 13 Jan 2021 17:19:37 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-13-dns/</guid>
      <description>&lt;p&gt;计算机网络/应用层/域名系统DNS&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP的运输连接管理</title>
      <link>https://yyf.zone/notes/2021-1-12-connectionmanagement/</link>
      <pubDate>Tue, 12 Jan 2021 16:32:10 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-12-connectionmanagement/</guid>
      <description>&lt;p&gt;计算机网络/运输层/TCP的运输连接管理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP的拥塞控制</title>
      <link>https://yyf.zone/notes/2021-1-11-congestioncontrol/</link>
      <pubDate>Mon, 11 Jan 2021 16:19:00 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-11-congestioncontrol/</guid>
      <description>&lt;p&gt;计算机网络/运输层/TCP的拥塞控制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP的流量控制</title>
      <link>https://yyf.zone/notes/2021-1-10-flowcontrol/</link>
      <pubDate>Sun, 10 Jan 2021 16:56:23 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-10-flowcontrol/</guid>
      <description>&lt;p&gt;计算机网络/运输层/TCP的流量控制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP可靠传输的实现</title>
      <link>https://yyf.zone/notes/2021-1-10-reliabletransmission/</link>
      <pubDate>Sun, 10 Jan 2021 15:58:40 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-10-reliabletransmission/</guid>
      <description>&lt;p&gt;计算机网络/运输层/TCP可靠传输的实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP报文段的首部格式</title>
      <link>https://yyf.zone/notes/2021-1-9-headoftcp/</link>
      <pubDate>Sat, 09 Jan 2021 11:49:10 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-9-headoftcp/</guid>
      <description>&lt;p&gt;计算机网络/运输层/TCP报文段的首部格式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>传输控制协议TCP概述</title>
      <link>https://yyf.zone/notes/2021-1-8-overviewoftcp/</link>
      <pubDate>Fri, 08 Jan 2021 15:23:58 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-8-overviewoftcp/</guid>
      <description>&lt;p&gt;计算机网络/运输层/传输控制协议TCP概述&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用户数据报协议UDP</title>
      <link>https://yyf.zone/notes/2021-1-8-udp/</link>
      <pubDate>Fri, 08 Jan 2021 13:44:43 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-8-udp/</guid>
      <description>&lt;p&gt;计算机网络/运输层/用户数据报协议UDP&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>运输层协议概述</title>
      <link>https://yyf.zone/notes/2021-1-7-overviewoftransportlayer/</link>
      <pubDate>Thu, 07 Jan 2021 15:11:59 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-7-overviewoftransportlayer/</guid>
      <description>&lt;p&gt;运输层/运输层概述&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>多协议标签交换MPLS</title>
      <link>https://yyf.zone/notes/2021-1-6-mpls/</link>
      <pubDate>Wed, 06 Jan 2021 16:42:04 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-6-mpls/</guid>
      <description>&lt;p&gt;网络层/多协议标签交换MPLS&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPv6</title>
      <link>https://yyf.zone/notes/2021-1-2-ipv6/</link>
      <pubDate>Sat, 02 Jan 2021 23:16:36 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-2-ipv6/</guid>
      <description>&lt;p&gt;网络层/IPv6&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IP多播</title>
      <link>https://yyf.zone/notes/2021-1-2-ipmulticast/</link>
      <pubDate>Sat, 02 Jan 2021 18:03:36 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-2-ipmulticast/</guid>
      <description>&lt;p&gt;网络层/IP多播&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>虚拟专用网络VPN和网络地址转换NAT</title>
      <link>https://yyf.zone/notes/2021-1-5-vpnandnat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yyf.zone/notes/2021-1-5-vpnandnat/</guid>
      <description>&lt;p&gt;计算机网络/网络层/虚拟专用网络VPN和网络地址转换NAT&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
